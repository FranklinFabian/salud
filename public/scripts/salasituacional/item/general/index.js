/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 189);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./resources/scripts/salasituacional/item/general/index.js":
/*!*****************************************************************!*\
  !*** ./resources/scripts/salasituacional/item/general/index.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval(" // Shared Colors Definition\n\nvar primary = '#6993FF';\nvar success = '#1BC5BD';\nvar info = '#8950FC';\nvar warning = '#FFA800';\nvar danger = '#F64E60';\n\nvar KTApexChartsDemo = function () {\n  // Private functions\n  var grafico_rhd = function grafico_rhd() {\n    var apexChart = \"#grafico_rhd\";\n    var options = {\n      series: [],\n      chart: {\n        animations: {\n          enabled: true,\n          easing: 'easeinout',\n          speed: 800,\n          animateGradually: {\n            enabled: true,\n            delay: 150\n          },\n          dynamicAnimation: {\n            enabled: true,\n            speed: 350\n          }\n        },\n        type: 'bar',\n        height: 750,\n        width: \"100%\"\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          endingShape: 'rounded',\n          barHeight: '100%'\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: []\n      },\n      legend: {\n        position: \"right\",\n        verticalAlign: \"top\",\n        containerMargin: {\n          left: 35,\n          right: 60\n        }\n      },\n      yaxis: {\n        title: {\n          text: 'Disponibilidad Camas UTI por Departamento a Nivel Nacional'\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      tooltip: {\n        y: {\n          formatter: function formatter(val) {\n            return val + \" Camas\";\n          }\n        }\n      },\n      noData: {\n        text: 'Cargando....',\n        align: 'center',\n        verticalAlign: 'middle',\n        offsetX: 0,\n        offsetY: 0,\n        style: {\n          color: undefined,\n          fontSize: '14px',\n          fontFamily: undefined\n        }\n      },\n      colors: ['#3f48cc', '#ff7f27', '#f44336']\n    };\n    var chart = new ApexCharts(document.querySelector(apexChart), options);\n    chart.render();\n    $.getJSON(HOST_URL + '/salasituacional/item/general/grafico_rhd/', function (response) {\n      chart.updateSeries(response.serie);\n      chart.updateOptions({\n        xaxis: {\n          categories: response.categoria\n        }\n      });\n    });\n  };\n\n  var grafico_banco_oxigeno = function grafico_banco_oxigeno() {\n    var apexChart = \"#grafico_banco_oxigeno\";\n    var options = {\n      series: [],\n      chart: {\n        animations: {\n          enabled: true,\n          easing: 'easeinout',\n          speed: 800,\n          animateGradually: {\n            enabled: true,\n            delay: 150\n          },\n          dynamicAnimation: {\n            enabled: true,\n            speed: 350\n          }\n        },\n        type: 'bar',\n        height: 750,\n        width: \"100%\"\n      },\n      plotOptions: {\n        bar: {\n          horizontal: false,\n          endingShape: 'rounded',\n          barHeight: '100%'\n        }\n      },\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        show: true,\n        width: 1,\n        colors: ['transparent']\n      },\n      xaxis: {\n        categories: []\n      },\n      legend: {\n        position: \"right\",\n        verticalAlign: \"top\",\n        containerMargin: {\n          left: 35,\n          right: 60\n        }\n      },\n      yaxis: {\n        title: {\n          text: 'Disponibilidad de Tubos de Oxígeno por Departamento a Nivel Nacional'\n        }\n      },\n      fill: {\n        opacity: 1\n      },\n      tooltip: {\n        y: {\n          formatter: function formatter(val) {\n            return val + \" Tubos\";\n          }\n        }\n      },\n      noData: {\n        text: 'Cargando....',\n        align: 'center',\n        verticalAlign: 'middle',\n        offsetX: 0,\n        offsetY: 0,\n        style: {\n          color: undefined,\n          fontSize: '14px',\n          fontFamily: undefined\n        }\n      },\n      colors: ['#52fff9', '#00a8f3', '#3f48cc', '#ff7f27', '#9c27b0', '#f44336']\n    };\n    var chart = new ApexCharts(document.querySelector(apexChart), options);\n    chart.render();\n    $.getJSON(HOST_URL + '/salasituacional/item/general/grafico_banco_oxigeno/', function (response) {\n      chart.updateSeries(response.serie);\n      chart.updateOptions({\n        xaxis: {\n          categories: response.categoria\n        }\n      });\n    });\n  };\n\n  var grafico_sive = function grafico_sive() {\n    var apexChart = \"#grafico_sive\";\n    var options = {\n      series: [],\n      chart: {\n        type: 'line',\n        zoom: {\n          enabled: false\n        },\n        height: 350,\n        toolbar: {\n          show: true\n        }\n      },\n      noData: {\n        text: 'Cargando....',\n        align: 'center',\n        verticalAlign: 'middle',\n        offsetX: 0,\n        offsetY: 0,\n        style: {\n          color: undefined,\n          fontSize: '20px',\n          fontFamily: undefined\n        }\n      },\n      colors: ['#f44336', '#0ed145', '#3f48cc'],\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      grid: {\n        borderColor: '#e7e7e7',\n        row: {\n          colors: ['#f3f3f3', 'transparent'],\n          // takes an array which will be repeated on columns\n          opacity: 0.5\n        }\n      },\n\n      /*markers: {\n          size: 1\n      },*/\n      xaxis: {\n        categories: [],\n        title: {\n          text: 'Semana Epidemiológica'\n        }\n      },\n      yaxis: {\n        title: {\n          text: 'Casos Positivos COVID19 a Nivel Nacional'\n        },\n        min: 5,\n        max: 7000\n      }\n    };\n    var chart = new ApexCharts(document.querySelector(apexChart), options);\n    chart.render();\n    $.getJSON(HOST_URL + '/salasituacional/item/general/grafico_sive/', function (response) {\n      chart.updateSeries(response.serie);\n      chart.updateOptions({\n        xaxis: {\n          categories: response.categoria\n        }\n      });\n    });\n  };\n\n  var grafico_sive_positivos = function grafico_sive_positivos() {\n    var apexChart = \"#grafico_sive_positivos\";\n    var options = {\n      series: [],\n      chart: {\n        type: 'line',\n        zoom: {\n          enabled: false\n        },\n        height: 350,\n        toolbar: {\n          show: true\n        }\n      },\n      noData: {\n        text: 'Cargando....',\n        align: 'center',\n        verticalAlign: 'middle',\n        offsetX: 0,\n        offsetY: 0,\n        style: {\n          color: undefined,\n          fontSize: '20px',\n          fontFamily: undefined\n        }\n      },\n      colors: ['#0ed145', '#f44336', '#3f48cc'],\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      grid: {\n        borderColor: '#e7e7e7',\n        row: {\n          colors: ['#f3f3f3', 'transparent'],\n          // takes an array which will be repeated on columns\n          opacity: 0.5\n        }\n      },\n\n      /*markers: {\n          size: 1\n      },*/\n      xaxis: {\n        categories: [],\n        title: {\n          text: 'Semana Epidemiológica'\n        }\n      },\n      yaxis: {\n        title: {\n          text: 'Casos Positivos COVID19 a Nivel Nacional'\n        },\n        min: 5,\n        max: 3700\n      }\n    };\n    var chart = new ApexCharts(document.querySelector(apexChart), options);\n    chart.render();\n    $.getJSON(HOST_URL + '/salasituacional/item/general/grafico_sive_positivos/', function (response) {\n      chart.updateSeries(response.serie);\n      chart.updateOptions({\n        xaxis: {\n          categories: response.categoria\n        }\n      });\n    });\n  };\n\n  var grafico_rhd_utis = function grafico_rhd_utis() {\n    var apexChart = \"#grafico_rhd_utis\";\n    var options = {\n      series: [],\n      chart: {\n        type: 'line',\n        zoom: {\n          enabled: false\n        },\n        height: 350,\n        toolbar: {\n          show: true\n        }\n      },\n      noData: {\n        text: 'Cargando....',\n        align: 'center',\n        verticalAlign: 'middle',\n        offsetX: 0,\n        offsetY: 0,\n        style: {\n          color: undefined,\n          fontSize: '20px',\n          fontFamily: undefined\n        }\n      },\n      colors: ['#3f48cc', '#f44336'],\n      dataLabels: {\n        enabled: false\n      },\n      stroke: {\n        curve: 'smooth'\n      },\n      grid: {\n        borderColor: '#e7e7e7',\n        row: {\n          colors: ['#f3f3f3', 'transparent'],\n          // takes an array which will be repeated on columns\n          opacity: 0.5\n        }\n      },\n\n      /*markers: {\n          size: 1\n      },*/\n      xaxis: {\n        categories: [],\n        title: {\n          text: 'Fecha del Reporte'\n        }\n      },\n      yaxis: {\n        title: {\n          text: 'Camas UTI a Nivel Nacional'\n        },\n        min: 5,\n        max: 400\n      }\n    };\n    var chart = new ApexCharts(document.querySelector(apexChart), options);\n    chart.render();\n    $.getJSON(HOST_URL + '/salasituacional/item/general/grafico_rhd_utis/', function (response) {\n      chart.updateSeries(response.serie);\n      chart.updateOptions({\n        xaxis: {\n          categories: response.categoria\n        }\n      });\n    });\n  };\n\n  var grafico_rnve = function grafico_rnve() {\n    var apexChart = \"#grafico_rnve\";\n    var options = {\n      series: [],\n      chart: {\n        width: 700,\n        type: 'donut'\n      },\n      labels: [],\n      responsive: [{\n        breakpoint: 480,\n        options: {\n          chart: {\n            width: 200\n          },\n          legend: {\n            position: 'bottom'\n          }\n        }\n      }],\n      colors: ['#ffe88b', '#c3c3c3', '#585858', '#52fff9', '#00a8f3', '#3f48cc', '#ff7f27', '#9c27b0', '#f44336']\n    };\n    var chart = new ApexCharts(document.querySelector(apexChart), options);\n    chart.render();\n    $.getJSON(HOST_URL + '/salasituacional/item/general/grafico_rnve/', function (response) {\n      chart.updateOptions({\n        series: response.serie,\n        labels: response.categoria\n      });\n    });\n  };\n\n  return {\n    // public functions\n    init: function init() {\n      grafico_rhd();\n      grafico_banco_oxigeno();\n      grafico_sive();\n      grafico_rhd_utis();\n      grafico_rnve();\n      grafico_sive_positivos();\n    }\n  };\n}();\n\njQuery(document).ready(function () {\n  KTApexChartsDemo.init();\n  $('.select2_general').select2({\n    placeholder: \"Seleccione una opción\"\n  });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./resources/scripts/salasituacional/item/general/index.js\n");

/***/ }),

/***/ 189:
/*!***********************************************************************!*\
  !*** multi ./resources/scripts/salasituacional/item/general/index.js ***!
  \***********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! C:\gitlab\salud.asuss.gob.bo\resources\scripts\salasituacional\item\general\index.js */"./resources/scripts/salasituacional/item/general/index.js");


/***/ })

/******/ });